import { observer } from 'mobx-react-lite';
import Chip from './ui/Chip';
import { Context, type IStoreContext } from '@/store/StoreProvider';
import { useContext, useEffect, useRef, useState } from 'react';

const WinHistoryFeed = observer(() => {
    const { user } = useContext(Context) as IStoreContext;
    const [newWinId, setNewWinId] = useState<string | null>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const previousWinsRef = useRef<typeof user.winHistory>([]);
    const isInitializedRef = useRef(false);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–∞–ø—Ä—è–º—É—é
    const recentWins = user.getRecentWins(15);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    useEffect(() => {
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (!isInitializedRef.current) {
            previousWinsRef.current = [...recentWins];
            isInitializedRef.current = true;
            return;
        }
        
        if (recentWins.length > 0 && previousWinsRef.current.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
            const currentFirstId = recentWins[0]?.id;
            const previousFirstId = previousWinsRef.current[0]?.id;
            
            
            if (currentFirstId && currentFirstId !== previousFirstId) {
                setNewWinId(currentFirstId);
                
                // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                const timer = setTimeout(() => {
                    setNewWinId(null);
                }, 500); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                previousWinsRef.current = [...recentWins];
                
                return () => {
                    clearTimeout(timer);
                };
            } else {
                previousWinsRef.current = [...recentWins];
            }
        } else {
            console.log('‚è≠Ô∏è Skipping check - not enough data');
        }
    }, [recentWins]);

    return (
        <div className="p-4 w-full absolute bottom-0 left-0">
            <div 
                ref={containerRef}
                className="flex gap-2 overflow-x-auto hide-scrollbar ios-scroll"
            >
                {recentWins.map((win, index) => {
                    const isNew = win.id === newWinId;
                    const isShifting = newWinId && index > 0;
                    
                    if (isNew || isShifting) {
                        console.log(`üé≠ Rendering chip ${win.id} (index: ${index}):`, {
                            isNew,
                            isShifting,
                            newWinId,
                            animationDelay: isShifting ? `${index * 30}ms` : '0ms'
                        });
                    }
                    
                    return (
                        <div
                            key={win.id}
                            className={`transition-all duration-500 ease-out ${
                                isNew 
                                    ? 'animate-slide-in-from-top' 
                                    : isShifting 
                                        ? 'animate-slide-right' 
                                        : ''
                            }`}
                            style={{
                                animationDelay: isShifting ? `${index * 30}ms` : '0ms',
                                willChange: isNew || isShifting ? 'transform, opacity' : 'auto'
                            }}
                        >
                            <Chip 
                                multiplier={win.multiplier}
                                className=""
                            />
                        </div>
                    );
                })}
            </div>
            
            {recentWins.length === 0 && (
                <p className="text-white opacity-70 text-center py-4">
                    –ü–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
                </p>
            )}
        </div>
    );
});

export default WinHistoryFeed;